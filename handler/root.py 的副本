# -*- coding: utf-8 -*-
import config
import os
from server.rsocket.gevent_socket import GeventSockect
from server.rsocket.file_socket import FileSocket
from lib.rthread import Rthread
from lib import rtransfer

#servers connect by tcp sockect, deal the msg
'''
def _server_deal(data):
    try:
        info = json.loads(data)
    except Exception, e:
        return error(ERROR_PARAM, 'data is not json')
    print info
    if not isinstance(info, dict) or info.get('action', '') not in ACTIONS:
        return error(ERROR_PARAM, 'param action error')
    action = info['action']
    if action == 'status': 
        return status()
    if action == 'register':
        return register()
    pass
'''

#nodes connect by file sockect, deal the msg
def _node_deal():
    #delete all socket files
    for socket_file in os.listdir(config.config('socket_folder')):
        if socket_file[-2:] == '.d':
            os.unlink(config.config('socket_folder') + '/' + socket_file)
    #init root socket
    socket_file = config.config('socket_folder') + '/socket_root.d'
    fsocket = FileSocket(socket_file)
    fsocket.server()
    while True:
        data = fsocket.receive()
        if not data:
            continue
        param = rtransfer.node_transfer_parser(data)
        if param == False:
            result = config.error('NOT_JSON', data)
            fsocket.send(result)
        else:
            if param['option'] == 'alive':
                result = config.success()
            elif param['option'] == 'status':
                result = config.success(config.node_status)
            elif param['option'] == 'start':
                result = config.success()
            elif param['option'] == 'stop':
                result = config.success()
            else:
                result = config.error('PARAM_ILLEGAL', 'Option key error.')
            fsocket.send(result)
        fsocket.close()
        exit(0)

#check root progress exist
def alive():
    socket_file = config.config('socket_folder') + '/socket_root.d'
    if not os.path.exists(socket_file):
        return False
    try:
        fsocket = FileSocket(socket_file)
        fsocket.client()
        data = rtransfer.node_transfer_data('alive')
        fsocket.send(data)
        fsocket.receive()
        fsocket.close()
        return True
    except Exception, e:
        #socket file exist, but can not connect
        return False
    
#get the progress list status
def status():
    socket_file = config.config('socket_folder') + '/socket_root.d'
    if not os.path.exists(socket_file):
        return False
    try:
        fsocket = FileSocket(socket_file)
        fsocket.client()
        data = rtransfer.node_transfer_data('status')
        fsocket.send(data)
        result = fsocket.receive()
        fsocket.close()
        return result
    except Exception, e:
        #socket file exist, but can not connect
        return False
import time
def start():
    Rthread(_node_deal, '_node_deal').start()
    while True:
        print config.node_status
        time.sleep(2)
    #worker = GeventSockect(config.config('socket_port'))
    #worker.run(server_deal)
    

    